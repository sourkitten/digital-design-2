// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/10/2022 14:06:31"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Question5
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Question5_vlg_sample_tst(
	CLK,
	CLR,
	EN,
	SET,
	sampler_tx
);
input  CLK;
input  CLR;
input  EN;
input  SET;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or CLR or EN or SET)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Question5_vlg_check_tst (
	oSEG0,
	oSEG1,
	oSEG2,
	oSEG3,
	oSEG4,
	oSEG5,
	oSEG6,
	oSEG20,
	oSEG21,
	oSEG22,
	oSEG23,
	oSEG24,
	oSEG25,
	oSEG26,
	Q,
	sampler_rx
);
input  oSEG0;
input  oSEG1;
input  oSEG2;
input  oSEG3;
input  oSEG4;
input  oSEG5;
input  oSEG6;
input  oSEG20;
input  oSEG21;
input  oSEG22;
input  oSEG23;
input  oSEG24;
input  oSEG25;
input  oSEG26;
input [7:0] Q;
input sampler_rx;

reg  oSEG0_expected;
reg  oSEG1_expected;
reg  oSEG2_expected;
reg  oSEG3_expected;
reg  oSEG4_expected;
reg  oSEG5_expected;
reg  oSEG6_expected;
reg  oSEG20_expected;
reg  oSEG21_expected;
reg  oSEG22_expected;
reg  oSEG23_expected;
reg  oSEG24_expected;
reg  oSEG25_expected;
reg  oSEG26_expected;
reg [7:0] Q_expected;

reg  oSEG0_prev;
reg  oSEG1_prev;
reg  oSEG2_prev;
reg  oSEG3_prev;
reg  oSEG4_prev;
reg  oSEG5_prev;
reg  oSEG6_prev;
reg  oSEG20_prev;
reg  oSEG21_prev;
reg  oSEG22_prev;
reg  oSEG23_prev;
reg  oSEG24_prev;
reg  oSEG25_prev;
reg  oSEG26_prev;
reg [7:0] Q_prev;

reg [7:0] Q_expected_prev;

reg [7:0] last_Q_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:15] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 15'b1;
end

// update real /o prevs

always @(trigger)
begin
	oSEG0_prev = oSEG0;
	oSEG1_prev = oSEG1;
	oSEG2_prev = oSEG2;
	oSEG3_prev = oSEG3;
	oSEG4_prev = oSEG4;
	oSEG5_prev = oSEG5;
	oSEG6_prev = oSEG6;
	oSEG20_prev = oSEG20;
	oSEG21_prev = oSEG21;
	oSEG22_prev = oSEG22;
	oSEG23_prev = oSEG23;
	oSEG24_prev = oSEG24;
	oSEG25_prev = oSEG25;
	oSEG26_prev = oSEG26;
	Q_prev = Q;
end

// update expected /o prevs

always @(trigger)
begin
	Q_expected_prev = Q_expected;
end


// expected Q[ 7 ]
initial
begin
	Q_expected[7] = 1'bX;
end 
// expected Q[ 6 ]
initial
begin
	Q_expected[6] = 1'bX;
end 
// expected Q[ 5 ]
initial
begin
	Q_expected[5] = 1'bX;
end 
// expected Q[ 4 ]
initial
begin
	Q_expected[4] = 1'bX;
end 
// expected Q[ 3 ]
initial
begin
	Q_expected[3] = 1'bX;
end 
// expected Q[ 2 ]
initial
begin
	Q_expected[2] = 1'bX;
end 
// expected Q[ 1 ]
initial
begin
	Q_expected[1] = 1'bX;
end 
// expected Q[ 0 ]
initial
begin
	Q_expected[0] = 1'bX;
end 
// generate trigger
always @(oSEG0_expected or oSEG0 or oSEG1_expected or oSEG1 or oSEG2_expected or oSEG2 or oSEG3_expected or oSEG3 or oSEG4_expected or oSEG4 or oSEG5_expected or oSEG5 or oSEG6_expected or oSEG6 or oSEG20_expected or oSEG20 or oSEG21_expected or oSEG21 or oSEG22_expected or oSEG22 or oSEG23_expected or oSEG23 or oSEG24_expected or oSEG24 or oSEG25_expected or oSEG25 or oSEG26_expected or oSEG26 or Q_expected or Q)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected oSEG0 = %b | expected oSEG1 = %b | expected oSEG2 = %b | expected oSEG3 = %b | expected oSEG4 = %b | expected oSEG5 = %b | expected oSEG6 = %b | expected oSEG20 = %b | expected oSEG21 = %b | expected oSEG22 = %b | expected oSEG23 = %b | expected oSEG24 = %b | expected oSEG25 = %b | expected oSEG26 = %b | expected Q = %b | ",oSEG0_expected_prev,oSEG1_expected_prev,oSEG2_expected_prev,oSEG3_expected_prev,oSEG4_expected_prev,oSEG5_expected_prev,oSEG6_expected_prev,oSEG20_expected_prev,oSEG21_expected_prev,oSEG22_expected_prev,oSEG23_expected_prev,oSEG24_expected_prev,oSEG25_expected_prev,oSEG26_expected_prev,Q_expected_prev);
	$display("| real oSEG0 = %b | real oSEG1 = %b | real oSEG2 = %b | real oSEG3 = %b | real oSEG4 = %b | real oSEG5 = %b | real oSEG6 = %b | real oSEG20 = %b | real oSEG21 = %b | real oSEG22 = %b | real oSEG23 = %b | real oSEG24 = %b | real oSEG25 = %b | real oSEG26 = %b | real Q = %b | ",oSEG0_prev,oSEG1_prev,oSEG2_prev,oSEG3_prev,oSEG4_prev,oSEG5_prev,oSEG6_prev,oSEG20_prev,oSEG21_prev,oSEG22_prev,oSEG23_prev,oSEG24_prev,oSEG25_prev,oSEG26_prev,Q_prev);
`endif
	if (
		( Q_expected_prev[0] !== 1'bx ) && ( Q_prev[0] !== Q_expected_prev[0] )
		&& ((Q_expected_prev[0] !== last_Q_exp[0]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_Q_exp[0] = Q_expected_prev[0];
	end
	if (
		( Q_expected_prev[1] !== 1'bx ) && ( Q_prev[1] !== Q_expected_prev[1] )
		&& ((Q_expected_prev[1] !== last_Q_exp[1]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_Q_exp[1] = Q_expected_prev[1];
	end
	if (
		( Q_expected_prev[2] !== 1'bx ) && ( Q_prev[2] !== Q_expected_prev[2] )
		&& ((Q_expected_prev[2] !== last_Q_exp[2]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_Q_exp[2] = Q_expected_prev[2];
	end
	if (
		( Q_expected_prev[3] !== 1'bx ) && ( Q_prev[3] !== Q_expected_prev[3] )
		&& ((Q_expected_prev[3] !== last_Q_exp[3]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_Q_exp[3] = Q_expected_prev[3];
	end
	if (
		( Q_expected_prev[4] !== 1'bx ) && ( Q_prev[4] !== Q_expected_prev[4] )
		&& ((Q_expected_prev[4] !== last_Q_exp[4]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_Q_exp[4] = Q_expected_prev[4];
	end
	if (
		( Q_expected_prev[5] !== 1'bx ) && ( Q_prev[5] !== Q_expected_prev[5] )
		&& ((Q_expected_prev[5] !== last_Q_exp[5]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_Q_exp[5] = Q_expected_prev[5];
	end
	if (
		( Q_expected_prev[6] !== 1'bx ) && ( Q_prev[6] !== Q_expected_prev[6] )
		&& ((Q_expected_prev[6] !== last_Q_exp[6]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_Q_exp[6] = Q_expected_prev[6];
	end
	if (
		( Q_expected_prev[7] !== 1'bx ) && ( Q_prev[7] !== Q_expected_prev[7] )
		&& ((Q_expected_prev[7] !== last_Q_exp[7]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_Q_exp[7] = Q_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#500000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Question5_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg CLR;
reg EN;
reg SET;
// wires                                               
wire oSEG0;
wire oSEG1;
wire oSEG2;
wire oSEG3;
wire oSEG4;
wire oSEG5;
wire oSEG6;
wire oSEG20;
wire oSEG21;
wire oSEG22;
wire oSEG23;
wire oSEG24;
wire oSEG25;
wire oSEG26;
wire [7:0] Q;

wire sampler;                             

// assign statements (if any)                          
Question5 i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.CLR(CLR),
	.EN(EN),
	.oSEG0(oSEG0),
	.oSEG1(oSEG1),
	.oSEG2(oSEG2),
	.oSEG3(oSEG3),
	.oSEG4(oSEG4),
	.oSEG5(oSEG5),
	.oSEG6(oSEG6),
	.oSEG20(oSEG20),
	.oSEG21(oSEG21),
	.oSEG22(oSEG22),
	.oSEG23(oSEG23),
	.oSEG24(oSEG24),
	.oSEG25(oSEG25),
	.oSEG26(oSEG26),
	.Q(Q),
	.SET(SET)
);

// SET
initial
begin
	SET = 1'b0;
	SET = #360000 1'b1;
	SET = #20000 1'b0;
end 

// CLR
initial
begin
	CLR = 1'b1;
	CLR = #1048 1'b0;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #10000 1'b1;
	#10000;
end 

// EN
initial
begin
	EN = 1'b1;
	EN = #140000 1'b0;
	EN = #100000 1'b1;
end 

Question5_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.CLR(CLR),
	.EN(EN),
	.SET(SET),
	.sampler_tx(sampler)
);

Question5_vlg_check_tst tb_out(
	.oSEG0(oSEG0),
	.oSEG1(oSEG1),
	.oSEG2(oSEG2),
	.oSEG3(oSEG3),
	.oSEG4(oSEG4),
	.oSEG5(oSEG5),
	.oSEG6(oSEG6),
	.oSEG20(oSEG20),
	.oSEG21(oSEG21),
	.oSEG22(oSEG22),
	.oSEG23(oSEG23),
	.oSEG24(oSEG24),
	.oSEG25(oSEG25),
	.oSEG26(oSEG26),
	.Q(Q),
	.sampler_rx(sampler)
);
endmodule


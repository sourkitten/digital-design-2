// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/17/2022 21:23:13"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    accumulator
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module accumulator_vlg_sample_tst(
	clk,
	I,
	reset,
	sampler_tx
);
input  clk;
input [3:0] I;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(clk or I or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module accumulator_vlg_check_tst (
	Hex6,
	Hex7,
	R,
	sampler_rx
);
input [6:0] Hex6;
input [6:0] Hex7;
input [7:0] R;
input sampler_rx;

reg [6:0] Hex6_expected;
reg [6:0] Hex7_expected;
reg [7:0] R_expected;

reg [6:0] Hex6_prev;
reg [6:0] Hex7_prev;
reg [7:0] R_prev;

reg [7:0] R_expected_prev;

reg [7:0] last_R_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	Hex6_prev = Hex6;
	Hex7_prev = Hex7;
	R_prev = R;
end

// update expected /o prevs

always @(trigger)
begin
	R_expected_prev = R_expected;
end


// expected R[ 7 ]
initial
begin
	R_expected[7] = 1'bX;
end 
// expected R[ 6 ]
initial
begin
	R_expected[6] = 1'bX;
end 
// expected R[ 5 ]
initial
begin
	R_expected[5] = 1'bX;
end 
// expected R[ 4 ]
initial
begin
	R_expected[4] = 1'bX;
end 
// expected R[ 3 ]
initial
begin
	R_expected[3] = 1'bX;
end 
// expected R[ 2 ]
initial
begin
	R_expected[2] = 1'bX;
end 
// expected R[ 1 ]
initial
begin
	R_expected[1] = 1'bX;
end 
// expected R[ 0 ]
initial
begin
	R_expected[0] = 1'bX;
end 
// generate trigger
always @(Hex6_expected or Hex6 or Hex7_expected or Hex7 or R_expected or R)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Hex6 = %b | expected Hex7 = %b | expected R = %b | ",Hex6_expected_prev,Hex7_expected_prev,R_expected_prev);
	$display("| real Hex6 = %b | real Hex7 = %b | real R = %b | ",Hex6_prev,Hex7_prev,R_prev);
`endif
	if (
		( R_expected_prev[0] !== 1'bx ) && ( R_prev[0] !== R_expected_prev[0] )
		&& ((R_expected_prev[0] !== last_R_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[0] = R_expected_prev[0];
	end
	if (
		( R_expected_prev[1] !== 1'bx ) && ( R_prev[1] !== R_expected_prev[1] )
		&& ((R_expected_prev[1] !== last_R_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[1] = R_expected_prev[1];
	end
	if (
		( R_expected_prev[2] !== 1'bx ) && ( R_prev[2] !== R_expected_prev[2] )
		&& ((R_expected_prev[2] !== last_R_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[2] = R_expected_prev[2];
	end
	if (
		( R_expected_prev[3] !== 1'bx ) && ( R_prev[3] !== R_expected_prev[3] )
		&& ((R_expected_prev[3] !== last_R_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[3] = R_expected_prev[3];
	end
	if (
		( R_expected_prev[4] !== 1'bx ) && ( R_prev[4] !== R_expected_prev[4] )
		&& ((R_expected_prev[4] !== last_R_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[4] = R_expected_prev[4];
	end
	if (
		( R_expected_prev[5] !== 1'bx ) && ( R_prev[5] !== R_expected_prev[5] )
		&& ((R_expected_prev[5] !== last_R_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[5] = R_expected_prev[5];
	end
	if (
		( R_expected_prev[6] !== 1'bx ) && ( R_prev[6] !== R_expected_prev[6] )
		&& ((R_expected_prev[6] !== last_R_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[6] = R_expected_prev[6];
	end
	if (
		( R_expected_prev[7] !== 1'bx ) && ( R_prev[7] !== R_expected_prev[7] )
		&& ((R_expected_prev[7] !== last_R_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R_expected_prev);
		$display ("     Real value = %b", R_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_R_exp[7] = R_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#160000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module accumulator_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [3:0] I;
reg reset;
// wires                                               
wire [6:0] Hex6;
wire [6:0] Hex7;
wire [7:0] R;

wire sampler;                             

// assign statements (if any)                          
accumulator i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.Hex6(Hex6),
	.Hex7(Hex7),
	.I(I),
	.R(R),
	.reset(reset)
);

// reset
initial
begin
	reset = 1'b1;
	reset = #20000 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 
// I[ 3 ]
initial
begin
	I[3] = 1'b0;
	I[3] = #80000 1'b1;
	I[3] = #40000 1'b0;
	I[3] = #20000 1'b1;
end 
// I[ 2 ]
initial
begin
	I[2] = 1'b0;
	I[2] = #60000 1'b1;
	I[2] = #20000 1'b0;
	I[2] = #20000 1'b1;
	I[2] = #20000 1'b0;
	I[2] = #20000 1'b1;
end 
// I[ 1 ]
initial
begin
	I[1] = 1'b0;
	I[1] = #40000 1'b1;
	I[1] = #20000 1'b0;
	I[1] = #40000 1'b1;
end 
// I[ 0 ]
initial
begin
	I[0] = 1'b0;
	I[0] = #20000 1'b1;
	I[0] = #20000 1'b0;
	I[0] = #80000 1'b1;
end 

accumulator_vlg_sample_tst tb_sample (
	.clk(clk),
	.I(I),
	.reset(reset),
	.sampler_tx(sampler)
);

accumulator_vlg_check_tst tb_out(
	.Hex6(Hex6),
	.Hex7(Hex7),
	.R(R),
	.sampler_rx(sampler)
);
endmodule


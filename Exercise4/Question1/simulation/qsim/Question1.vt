// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/03/2022 15:44:33"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Question1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Question1_vlg_sample_tst(
	CLK,
	reset,
	Start,
	XIN,
	YIN,
	sampler_tx
);
input  CLK;
input  reset;
input  Start;
input [7:0] XIN;
input [7:0] YIN;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or reset or Start or XIN or YIN)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Question1_vlg_check_tst (
	HEX4,
	HEX5,
	HEX6,
	HEX7,
	Q0,
	Q1,
	Sum,
	X,
	Y,
	Z,
	sampler_rx
);
input [6:0] HEX4;
input [6:0] HEX5;
input [6:0] HEX6;
input [6:0] HEX7;
input  Q0;
input  Q1;
input [7:0] Sum;
input [7:0] X;
input [7:0] Y;
input  Z;
input sampler_rx;

reg [6:0] HEX4_expected;
reg [6:0] HEX5_expected;
reg [6:0] HEX6_expected;
reg [6:0] HEX7_expected;
reg  Q0_expected;
reg  Q1_expected;
reg [7:0] Sum_expected;
reg [7:0] X_expected;
reg [7:0] Y_expected;
reg  Z_expected;

reg [6:0] HEX4_prev;
reg [6:0] HEX5_prev;
reg [6:0] HEX6_prev;
reg [6:0] HEX7_prev;
reg  Q0_prev;
reg  Q1_prev;
reg [7:0] Sum_prev;
reg [7:0] X_prev;
reg [7:0] Y_prev;
reg  Z_prev;

reg  Q0_expected_prev;
reg  Q1_expected_prev;
reg [7:0] X_expected_prev;
reg [7:0] Y_expected_prev;
reg  Z_expected_prev;

reg  last_Q0_exp;
reg  last_Q1_exp;
reg [7:0] last_X_exp;
reg [7:0] last_Y_exp;
reg  last_Z_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:10] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 10'b1;
end

// update real /o prevs

always @(trigger)
begin
	HEX4_prev = HEX4;
	HEX5_prev = HEX5;
	HEX6_prev = HEX6;
	HEX7_prev = HEX7;
	Q0_prev = Q0;
	Q1_prev = Q1;
	Sum_prev = Sum;
	X_prev = X;
	Y_prev = Y;
	Z_prev = Z;
end

// update expected /o prevs

always @(trigger)
begin
	Q0_expected_prev = Q0_expected;
	Q1_expected_prev = Q1_expected;
	X_expected_prev = X_expected;
	Y_expected_prev = Y_expected;
	Z_expected_prev = Z_expected;
end



// expected Q1
initial
begin
	Q1_expected = 1'bX;
end 

// expected Q0
initial
begin
	Q0_expected = 1'bX;
end 
// expected X[ 7 ]
initial
begin
	X_expected[7] = 1'bX;
	X_expected[7] = #239000 1'b0;
end 
// expected X[ 6 ]
initial
begin
	X_expected[6] = 1'bX;
	X_expected[6] = #239000 1'b0;
end 
// expected X[ 5 ]
initial
begin
	X_expected[5] = 1'bX;
	X_expected[5] = #239000 1'b0;
end 
// expected X[ 4 ]
initial
begin
	X_expected[4] = 1'bX;
	X_expected[4] = #239000 1'b0;
end 
// expected X[ 3 ]
initial
begin
	X_expected[3] = 1'bX;
	X_expected[3] = #239000 1'b0;
end 
// expected X[ 2 ]
initial
begin
	X_expected[2] = 1'bX;
	X_expected[2] = #239000 1'b0;
end 
// expected X[ 1 ]
initial
begin
	X_expected[1] = 1'bX;
	X_expected[1] = #239000 1'b0;
end 
// expected X[ 0 ]
initial
begin
	X_expected[0] = 1'bX;
	X_expected[0] = #239000 1'b0;
end 
// expected Y[ 7 ]
initial
begin
	Y_expected[7] = 1'bX;
	Y_expected[7] = #239000 1'b0;
end 
// expected Y[ 6 ]
initial
begin
	Y_expected[6] = 1'bX;
	Y_expected[6] = #239000 1'b0;
end 
// expected Y[ 5 ]
initial
begin
	Y_expected[5] = 1'bX;
	Y_expected[5] = #239000 1'b0;
end 
// expected Y[ 4 ]
initial
begin
	Y_expected[4] = 1'bX;
	Y_expected[4] = #239000 1'b0;
end 
// expected Y[ 3 ]
initial
begin
	Y_expected[3] = 1'bX;
	Y_expected[3] = #239000 1'b0;
end 
// expected Y[ 2 ]
initial
begin
	Y_expected[2] = 1'bX;
	Y_expected[2] = #239000 1'b0;
end 
// expected Y[ 1 ]
initial
begin
	Y_expected[1] = 1'bX;
	Y_expected[1] = #239000 1'b0;
end 
// expected Y[ 0 ]
initial
begin
	Y_expected[0] = 1'bX;
	Y_expected[0] = #239000 1'b0;
end 

// expected Z
initial
begin
	Z_expected = 1'bX;
end 
// generate trigger
always @(HEX4_expected or HEX4 or HEX5_expected or HEX5 or HEX6_expected or HEX6 or HEX7_expected or HEX7 or Q0_expected or Q0 or Q1_expected or Q1 or Sum_expected or Sum or X_expected or X or Y_expected or Y or Z_expected or Z)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected HEX4 = %b | expected HEX5 = %b | expected HEX6 = %b | expected HEX7 = %b | expected Q0 = %b | expected Q1 = %b | expected Sum = %b | expected X = %b | expected Y = %b | expected Z = %b | ",HEX4_expected_prev,HEX5_expected_prev,HEX6_expected_prev,HEX7_expected_prev,Q0_expected_prev,Q1_expected_prev,Sum_expected_prev,X_expected_prev,Y_expected_prev,Z_expected_prev);
	$display("| real HEX4 = %b | real HEX5 = %b | real HEX6 = %b | real HEX7 = %b | real Q0 = %b | real Q1 = %b | real Sum = %b | real X = %b | real Y = %b | real Z = %b | ",HEX4_prev,HEX5_prev,HEX6_prev,HEX7_prev,Q0_prev,Q1_prev,Sum_prev,X_prev,Y_prev,Z_prev);
`endif
	if (
		( Q0_expected_prev !== 1'bx ) && ( Q0_prev !== Q0_expected_prev )
		&& ((Q0_expected_prev !== last_Q0_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q0_expected_prev);
		$display ("     Real value = %b", Q0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Q0_exp = Q0_expected_prev;
	end
	if (
		( Q1_expected_prev !== 1'bx ) && ( Q1_prev !== Q1_expected_prev )
		&& ((Q1_expected_prev !== last_Q1_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q1_expected_prev);
		$display ("     Real value = %b", Q1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Q1_exp = Q1_expected_prev;
	end
	if (
		( X_expected_prev[0] !== 1'bx ) && ( X_prev[0] !== X_expected_prev[0] )
		&& ((X_expected_prev[0] !== last_X_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_X_exp[0] = X_expected_prev[0];
	end
	if (
		( X_expected_prev[1] !== 1'bx ) && ( X_prev[1] !== X_expected_prev[1] )
		&& ((X_expected_prev[1] !== last_X_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_X_exp[1] = X_expected_prev[1];
	end
	if (
		( X_expected_prev[2] !== 1'bx ) && ( X_prev[2] !== X_expected_prev[2] )
		&& ((X_expected_prev[2] !== last_X_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_X_exp[2] = X_expected_prev[2];
	end
	if (
		( X_expected_prev[3] !== 1'bx ) && ( X_prev[3] !== X_expected_prev[3] )
		&& ((X_expected_prev[3] !== last_X_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_X_exp[3] = X_expected_prev[3];
	end
	if (
		( X_expected_prev[4] !== 1'bx ) && ( X_prev[4] !== X_expected_prev[4] )
		&& ((X_expected_prev[4] !== last_X_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_X_exp[4] = X_expected_prev[4];
	end
	if (
		( X_expected_prev[5] !== 1'bx ) && ( X_prev[5] !== X_expected_prev[5] )
		&& ((X_expected_prev[5] !== last_X_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_X_exp[5] = X_expected_prev[5];
	end
	if (
		( X_expected_prev[6] !== 1'bx ) && ( X_prev[6] !== X_expected_prev[6] )
		&& ((X_expected_prev[6] !== last_X_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_X_exp[6] = X_expected_prev[6];
	end
	if (
		( X_expected_prev[7] !== 1'bx ) && ( X_prev[7] !== X_expected_prev[7] )
		&& ((X_expected_prev[7] !== last_X_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_X_exp[7] = X_expected_prev[7];
	end
	if (
		( Y_expected_prev[0] !== 1'bx ) && ( Y_prev[0] !== Y_expected_prev[0] )
		&& ((Y_expected_prev[0] !== last_Y_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Y_exp[0] = Y_expected_prev[0];
	end
	if (
		( Y_expected_prev[1] !== 1'bx ) && ( Y_prev[1] !== Y_expected_prev[1] )
		&& ((Y_expected_prev[1] !== last_Y_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Y_exp[1] = Y_expected_prev[1];
	end
	if (
		( Y_expected_prev[2] !== 1'bx ) && ( Y_prev[2] !== Y_expected_prev[2] )
		&& ((Y_expected_prev[2] !== last_Y_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Y_exp[2] = Y_expected_prev[2];
	end
	if (
		( Y_expected_prev[3] !== 1'bx ) && ( Y_prev[3] !== Y_expected_prev[3] )
		&& ((Y_expected_prev[3] !== last_Y_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Y_exp[3] = Y_expected_prev[3];
	end
	if (
		( Y_expected_prev[4] !== 1'bx ) && ( Y_prev[4] !== Y_expected_prev[4] )
		&& ((Y_expected_prev[4] !== last_Y_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Y_exp[4] = Y_expected_prev[4];
	end
	if (
		( Y_expected_prev[5] !== 1'bx ) && ( Y_prev[5] !== Y_expected_prev[5] )
		&& ((Y_expected_prev[5] !== last_Y_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Y_exp[5] = Y_expected_prev[5];
	end
	if (
		( Y_expected_prev[6] !== 1'bx ) && ( Y_prev[6] !== Y_expected_prev[6] )
		&& ((Y_expected_prev[6] !== last_Y_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Y_exp[6] = Y_expected_prev[6];
	end
	if (
		( Y_expected_prev[7] !== 1'bx ) && ( Y_prev[7] !== Y_expected_prev[7] )
		&& ((Y_expected_prev[7] !== last_Y_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_Y_exp[7] = Y_expected_prev[7];
	end
	if (
		( Z_expected_prev !== 1'bx ) && ( Z_prev !== Z_expected_prev )
		&& ((Z_expected_prev !== last_Z_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_Z_exp = Z_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#240000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Question1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg reset;
reg Start;
reg [7:0] XIN;
reg [7:0] YIN;
// wires                                               
wire [6:0] HEX4;
wire [6:0] HEX5;
wire [6:0] HEX6;
wire [6:0] HEX7;
wire Q0;
wire Q1;
wire [7:0] Sum;
wire [7:0] X;
wire [7:0] Y;
wire Z;

wire sampler;                             

// assign statements (if any)                          
Question1 i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.HEX4(HEX4),
	.HEX5(HEX5),
	.HEX6(HEX6),
	.HEX7(HEX7),
	.Q0(Q0),
	.Q1(Q1),
	.reset(reset),
	.Start(Start),
	.Sum(Sum),
	.X(X),
	.XIN(XIN),
	.Y(Y),
	.YIN(YIN),
	.Z(Z)
);

// reset
initial
begin
	reset = 1'b0;
	reset = #2415 1'b1;
end 

// CLK
initial
begin
	CLK = 1'b1;
	CLK = #10000 1'b0;
	# 10000;
	repeat(10)
	begin
		CLK = 1'b1;
		CLK = #10000 1'b0;
		# 10000;
	end
	CLK = 1'b1;
	CLK = #10000 1'b0;
	CLK = #9000 1'b1;
end 

// Start
initial
begin
	Start = 1'b1;
	Start = #20000 1'b0;
	Start = #40000 1'b1;
	Start = #20000 1'b0;
	Start = #40000 1'b1;
	Start = #20000 1'b0;
	Start = #40000 1'b1;
	Start = #20000 1'b0;
end 
// XIN[ 7 ]
initial
begin
	XIN[7] = 1'b0;
	XIN[7] = #120000 1'b1;
	XIN[7] = #20000 1'b0;
	XIN[7] = #40000 1'b1;
	XIN[7] = #20000 1'b0;
end 
// XIN[ 6 ]
initial
begin
	XIN[6] = 1'b1;
	XIN[6] = #20000 1'b0;
	XIN[6] = #40000 1'b1;
	XIN[6] = #20000 1'b0;
	XIN[6] = #40000 1'b1;
	XIN[6] = #20000 1'b0;
	XIN[6] = #40000 1'b1;
	XIN[6] = #20000 1'b0;
end 
// XIN[ 5 ]
initial
begin
	XIN[5] = 1'b1;
	XIN[5] = #20000 1'b0;
	XIN[5] = #100000 1'b1;
	XIN[5] = #20000 1'b0;
end 
// XIN[ 4 ]
initial
begin
	XIN[4] = 1'b1;
	XIN[4] = #20000 1'b0;
	XIN[4] = #100000 1'b1;
	XIN[4] = #20000 1'b0;
end 
// XIN[ 3 ]
initial
begin
	XIN[3] = 1'b1;
	XIN[3] = #20000 1'b0;
	XIN[3] = #100000 1'b1;
	XIN[3] = #20000 1'b0;
	XIN[3] = #40000 1'b1;
	XIN[3] = #20000 1'b0;
end 
// XIN[ 2 ]
initial
begin
	XIN[2] = 1'b1;
	XIN[2] = #20000 1'b0;
	XIN[2] = #100000 1'b1;
	XIN[2] = #20000 1'b0;
	XIN[2] = #40000 1'b1;
	XIN[2] = #20000 1'b0;
end 
// XIN[ 1 ]
initial
begin
	XIN[1] = 1'b1;
	XIN[1] = #20000 1'b0;
	XIN[1] = #100000 1'b1;
	XIN[1] = #20000 1'b0;
	XIN[1] = #40000 1'b1;
	XIN[1] = #20000 1'b0;
end 
// XIN[ 0 ]
initial
begin
	XIN[0] = 1'b1;
	XIN[0] = #20000 1'b0;
end 
// YIN[ 7 ]
initial
begin
	YIN[7] = 1'b0;
	YIN[7] = #180000 1'b1;
	YIN[7] = #20000 1'b0;
end 
// YIN[ 6 ]
initial
begin
	YIN[6] = 1'b0;
	YIN[6] = #60000 1'b1;
	YIN[6] = #20000 1'b0;
	YIN[6] = #100000 1'b1;
	YIN[6] = #20000 1'b0;
end 
// YIN[ 5 ]
initial
begin
	YIN[5] = 1'b1;
	YIN[5] = #20000 1'b0;
end 
// YIN[ 4 ]
initial
begin
	YIN[4] = 1'b0;
	YIN[4] = #60000 1'b1;
	YIN[4] = #20000 1'b0;
end 
// YIN[ 3 ]
initial
begin
	YIN[3] = 1'b0;
	YIN[3] = #180000 1'b1;
	YIN[3] = #20000 1'b0;
end 
// YIN[ 2 ]
initial
begin
	YIN[2] = 1'b0;
	YIN[2] = #60000 1'b1;
	YIN[2] = #20000 1'b0;
	YIN[2] = #100000 1'b1;
	YIN[2] = #20000 1'b0;
end 
// YIN[ 1 ]
initial
begin
	YIN[1] = 1'b0;
	YIN[1] = #180000 1'b1;
	YIN[1] = #20000 1'b0;
end 
// YIN[ 0 ]
initial
begin
	YIN[0] = 1'b0;
	YIN[0] = #60000 1'b1;
	YIN[0] = #20000 1'b0;
	YIN[0] = #40000 1'b1;
	YIN[0] = #20000 1'b0;
end 

Question1_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.reset(reset),
	.Start(Start),
	.XIN(XIN),
	.YIN(YIN),
	.sampler_tx(sampler)
);

Question1_vlg_check_tst tb_out(
	.HEX4(HEX4),
	.HEX5(HEX5),
	.HEX6(HEX6),
	.HEX7(HEX7),
	.Q0(Q0),
	.Q1(Q1),
	.Sum(Sum),
	.X(X),
	.Y(Y),
	.Z(Z),
	.sampler_rx(sampler)
);
endmodule


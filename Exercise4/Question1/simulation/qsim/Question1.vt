// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/26/2022 15:00:13"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Datapath
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Datapath_vlg_sample_tst(
	CLK,
	ENA,
	ENB,
	LSA,
	LSB,
	reset,
	SelA,
	SelB,
	SF,
	Sub,
	XIN,
	YIN,
	sampler_tx
);
input  CLK;
input  ENA;
input  ENB;
input  LSA;
input  LSB;
input  reset;
input  SelA;
input  SelB;
input  SF;
input  Sub;
input [7:0] XIN;
input [7:0] YIN;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or ENA or ENB or LSA or LSB or reset or SelA or SelB or SF or Sub or XIN or YIN)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Datapath_vlg_check_tst (
	Sum,
	X,
	Y,
	Z,
	sampler_rx
);
input [7:0] Sum;
input [7:0] X;
input [7:0] Y;
input  Z;
input sampler_rx;

reg [7:0] Sum_expected;
reg [7:0] X_expected;
reg [7:0] Y_expected;
reg  Z_expected;

reg [7:0] Sum_prev;
reg [7:0] X_prev;
reg [7:0] Y_prev;
reg  Z_prev;

reg [7:0] Sum_expected_prev;
reg [7:0] X_expected_prev;
reg [7:0] Y_expected_prev;
reg  Z_expected_prev;

reg [7:0] last_Sum_exp;
reg [7:0] last_X_exp;
reg [7:0] last_Y_exp;
reg  last_Z_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	Sum_prev = Sum;
	X_prev = X;
	Y_prev = Y;
	Z_prev = Z;
end

// update expected /o prevs

always @(trigger)
begin
	Sum_expected_prev = Sum_expected;
	X_expected_prev = X_expected;
	Y_expected_prev = Y_expected;
	Z_expected_prev = Z_expected;
end


// expected X[ 7 ]
initial
begin
	X_expected[7] = 1'bX;
end 
// expected X[ 6 ]
initial
begin
	X_expected[6] = 1'bX;
end 
// expected X[ 5 ]
initial
begin
	X_expected[5] = 1'bX;
end 
// expected X[ 4 ]
initial
begin
	X_expected[4] = 1'bX;
end 
// expected X[ 3 ]
initial
begin
	X_expected[3] = 1'bX;
end 
// expected X[ 2 ]
initial
begin
	X_expected[2] = 1'bX;
end 
// expected X[ 1 ]
initial
begin
	X_expected[1] = 1'bX;
end 
// expected X[ 0 ]
initial
begin
	X_expected[0] = 1'bX;
end 
// expected Y[ 7 ]
initial
begin
	Y_expected[7] = 1'bX;
end 
// expected Y[ 6 ]
initial
begin
	Y_expected[6] = 1'bX;
end 
// expected Y[ 5 ]
initial
begin
	Y_expected[5] = 1'bX;
end 
// expected Y[ 4 ]
initial
begin
	Y_expected[4] = 1'bX;
end 
// expected Y[ 3 ]
initial
begin
	Y_expected[3] = 1'bX;
end 
// expected Y[ 2 ]
initial
begin
	Y_expected[2] = 1'bX;
end 
// expected Y[ 1 ]
initial
begin
	Y_expected[1] = 1'bX;
end 
// expected Y[ 0 ]
initial
begin
	Y_expected[0] = 1'bX;
end 
// expected Sum[ 7 ]
initial
begin
	Sum_expected[7] = 1'bX;
end 
// expected Sum[ 6 ]
initial
begin
	Sum_expected[6] = 1'bX;
end 
// expected Sum[ 5 ]
initial
begin
	Sum_expected[5] = 1'bX;
end 
// expected Sum[ 4 ]
initial
begin
	Sum_expected[4] = 1'bX;
end 
// expected Sum[ 3 ]
initial
begin
	Sum_expected[3] = 1'bX;
end 
// expected Sum[ 2 ]
initial
begin
	Sum_expected[2] = 1'bX;
end 
// expected Sum[ 1 ]
initial
begin
	Sum_expected[1] = 1'bX;
end 
// expected Sum[ 0 ]
initial
begin
	Sum_expected[0] = 1'bX;
end 

// expected Z
initial
begin
	Z_expected = 1'bX;
end 
// generate trigger
always @(Sum_expected or Sum or X_expected or X or Y_expected or Y or Z_expected or Z)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Sum = %b | expected X = %b | expected Y = %b | expected Z = %b | ",Sum_expected_prev,X_expected_prev,Y_expected_prev,Z_expected_prev);
	$display("| real Sum = %b | real X = %b | real Y = %b | real Z = %b | ",Sum_prev,X_prev,Y_prev,Z_prev);
`endif
	if (
		( Sum_expected_prev[0] !== 1'bx ) && ( Sum_prev[0] !== Sum_expected_prev[0] )
		&& ((Sum_expected_prev[0] !== last_Sum_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sum[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sum_expected_prev);
		$display ("     Real value = %b", Sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Sum_exp[0] = Sum_expected_prev[0];
	end
	if (
		( Sum_expected_prev[1] !== 1'bx ) && ( Sum_prev[1] !== Sum_expected_prev[1] )
		&& ((Sum_expected_prev[1] !== last_Sum_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sum[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sum_expected_prev);
		$display ("     Real value = %b", Sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Sum_exp[1] = Sum_expected_prev[1];
	end
	if (
		( Sum_expected_prev[2] !== 1'bx ) && ( Sum_prev[2] !== Sum_expected_prev[2] )
		&& ((Sum_expected_prev[2] !== last_Sum_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sum[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sum_expected_prev);
		$display ("     Real value = %b", Sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Sum_exp[2] = Sum_expected_prev[2];
	end
	if (
		( Sum_expected_prev[3] !== 1'bx ) && ( Sum_prev[3] !== Sum_expected_prev[3] )
		&& ((Sum_expected_prev[3] !== last_Sum_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sum[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sum_expected_prev);
		$display ("     Real value = %b", Sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Sum_exp[3] = Sum_expected_prev[3];
	end
	if (
		( Sum_expected_prev[4] !== 1'bx ) && ( Sum_prev[4] !== Sum_expected_prev[4] )
		&& ((Sum_expected_prev[4] !== last_Sum_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sum[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sum_expected_prev);
		$display ("     Real value = %b", Sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Sum_exp[4] = Sum_expected_prev[4];
	end
	if (
		( Sum_expected_prev[5] !== 1'bx ) && ( Sum_prev[5] !== Sum_expected_prev[5] )
		&& ((Sum_expected_prev[5] !== last_Sum_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sum[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sum_expected_prev);
		$display ("     Real value = %b", Sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Sum_exp[5] = Sum_expected_prev[5];
	end
	if (
		( Sum_expected_prev[6] !== 1'bx ) && ( Sum_prev[6] !== Sum_expected_prev[6] )
		&& ((Sum_expected_prev[6] !== last_Sum_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sum[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sum_expected_prev);
		$display ("     Real value = %b", Sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Sum_exp[6] = Sum_expected_prev[6];
	end
	if (
		( Sum_expected_prev[7] !== 1'bx ) && ( Sum_prev[7] !== Sum_expected_prev[7] )
		&& ((Sum_expected_prev[7] !== last_Sum_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Sum[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Sum_expected_prev);
		$display ("     Real value = %b", Sum_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Sum_exp[7] = Sum_expected_prev[7];
	end
	if (
		( X_expected_prev[0] !== 1'bx ) && ( X_prev[0] !== X_expected_prev[0] )
		&& ((X_expected_prev[0] !== last_X_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_X_exp[0] = X_expected_prev[0];
	end
	if (
		( X_expected_prev[1] !== 1'bx ) && ( X_prev[1] !== X_expected_prev[1] )
		&& ((X_expected_prev[1] !== last_X_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_X_exp[1] = X_expected_prev[1];
	end
	if (
		( X_expected_prev[2] !== 1'bx ) && ( X_prev[2] !== X_expected_prev[2] )
		&& ((X_expected_prev[2] !== last_X_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_X_exp[2] = X_expected_prev[2];
	end
	if (
		( X_expected_prev[3] !== 1'bx ) && ( X_prev[3] !== X_expected_prev[3] )
		&& ((X_expected_prev[3] !== last_X_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_X_exp[3] = X_expected_prev[3];
	end
	if (
		( X_expected_prev[4] !== 1'bx ) && ( X_prev[4] !== X_expected_prev[4] )
		&& ((X_expected_prev[4] !== last_X_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_X_exp[4] = X_expected_prev[4];
	end
	if (
		( X_expected_prev[5] !== 1'bx ) && ( X_prev[5] !== X_expected_prev[5] )
		&& ((X_expected_prev[5] !== last_X_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_X_exp[5] = X_expected_prev[5];
	end
	if (
		( X_expected_prev[6] !== 1'bx ) && ( X_prev[6] !== X_expected_prev[6] )
		&& ((X_expected_prev[6] !== last_X_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_X_exp[6] = X_expected_prev[6];
	end
	if (
		( X_expected_prev[7] !== 1'bx ) && ( X_prev[7] !== X_expected_prev[7] )
		&& ((X_expected_prev[7] !== last_X_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port X[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", X_expected_prev);
		$display ("     Real value = %b", X_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_X_exp[7] = X_expected_prev[7];
	end
	if (
		( Y_expected_prev[0] !== 1'bx ) && ( Y_prev[0] !== Y_expected_prev[0] )
		&& ((Y_expected_prev[0] !== last_Y_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Y_exp[0] = Y_expected_prev[0];
	end
	if (
		( Y_expected_prev[1] !== 1'bx ) && ( Y_prev[1] !== Y_expected_prev[1] )
		&& ((Y_expected_prev[1] !== last_Y_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Y_exp[1] = Y_expected_prev[1];
	end
	if (
		( Y_expected_prev[2] !== 1'bx ) && ( Y_prev[2] !== Y_expected_prev[2] )
		&& ((Y_expected_prev[2] !== last_Y_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Y_exp[2] = Y_expected_prev[2];
	end
	if (
		( Y_expected_prev[3] !== 1'bx ) && ( Y_prev[3] !== Y_expected_prev[3] )
		&& ((Y_expected_prev[3] !== last_Y_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Y_exp[3] = Y_expected_prev[3];
	end
	if (
		( Y_expected_prev[4] !== 1'bx ) && ( Y_prev[4] !== Y_expected_prev[4] )
		&& ((Y_expected_prev[4] !== last_Y_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Y_exp[4] = Y_expected_prev[4];
	end
	if (
		( Y_expected_prev[5] !== 1'bx ) && ( Y_prev[5] !== Y_expected_prev[5] )
		&& ((Y_expected_prev[5] !== last_Y_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Y_exp[5] = Y_expected_prev[5];
	end
	if (
		( Y_expected_prev[6] !== 1'bx ) && ( Y_prev[6] !== Y_expected_prev[6] )
		&& ((Y_expected_prev[6] !== last_Y_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Y_exp[6] = Y_expected_prev[6];
	end
	if (
		( Y_expected_prev[7] !== 1'bx ) && ( Y_prev[7] !== Y_expected_prev[7] )
		&& ((Y_expected_prev[7] !== last_Y_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Y[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Y_expected_prev);
		$display ("     Real value = %b", Y_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Y_exp[7] = Y_expected_prev[7];
	end
	if (
		( Z_expected_prev !== 1'bx ) && ( Z_prev !== Z_expected_prev )
		&& ((Z_expected_prev !== last_Z_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Z_exp = Z_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#140000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Datapath_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg ENA;
reg ENB;
reg LSA;
reg LSB;
reg reset;
reg SelA;
reg SelB;
reg SF;
reg Sub;
reg [7:0] XIN;
reg [7:0] YIN;
// wires                                               
wire [7:0] Sum;
wire [7:0] X;
wire [7:0] Y;
wire Z;

wire sampler;                             

// assign statements (if any)                          
Datapath i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.ENA(ENA),
	.ENB(ENB),
	.LSA(LSA),
	.LSB(LSB),
	.reset(reset),
	.SelA(SelA),
	.SelB(SelB),
	.SF(SF),
	.Sub(Sub),
	.Sum(Sum),
	.X(X),
	.XIN(XIN),
	.Y(Y),
	.YIN(YIN),
	.Z(Z)
);

// reset
initial
begin
	reset = 1'b1;
	reset = #10000 1'b0;
	reset = #110000 1'b1;
	reset = #10000 1'b0;
end 

// ENA
initial
begin
	ENA = 1'b1;
	ENA = #100000 1'b0;
end 

// ENB
initial
begin
	ENB = 1'b1;
	ENB = #100000 1'b0;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #10000 1'b1;
	#10000;
end 

// LSA
initial
begin
	LSA = 1'b0;
	LSA = #20000 1'b1;
	LSA = #20000 1'b0;
	LSA = #20000 1'b1;
	LSA = #20000 1'b0;
end 

// SelA
initial
begin
	SelA = 1'b0;
	SelA = #40000 1'b1;
	SelA = #20000 1'b0;
	SelA = #20000 1'b1;
	SelA = #20000 1'b0;
end 
// XIN[ 7 ]
initial
begin
	XIN[7] = 1'b0;
end 
// XIN[ 6 ]
initial
begin
	XIN[6] = 1'b0;
end 
// XIN[ 5 ]
initial
begin
	XIN[5] = 1'b0;
end 
// XIN[ 4 ]
initial
begin
	XIN[4] = 1'b1;
	XIN[4] = #20000 1'b0;
end 
// XIN[ 3 ]
initial
begin
	XIN[3] = 1'b1;
	XIN[3] = #20000 1'b0;
end 
// XIN[ 2 ]
initial
begin
	XIN[2] = 1'b0;
end 
// XIN[ 1 ]
initial
begin
	XIN[1] = 1'b1;
	XIN[1] = #20000 1'b0;
end 
// XIN[ 0 ]
initial
begin
	XIN[0] = 1'b1;
	XIN[0] = #20000 1'b0;
end 

// LSB
initial
begin
	LSB = 1'b0;
	LSB = #20000 1'b1;
	LSB = #20000 1'b0;
	LSB = #20000 1'b1;
	LSB = #20000 1'b0;
end 

// SelB
initial
begin
	SelB = 1'b0;
	SelB = #40000 1'b1;
	SelB = #20000 1'b0;
	SelB = #20000 1'b1;
	SelB = #20000 1'b0;
end 
// YIN[ 7 ]
initial
begin
	YIN[7] = 1'b0;
end 
// YIN[ 6 ]
initial
begin
	YIN[6] = 1'b0;
end 
// YIN[ 5 ]
initial
begin
	YIN[5] = 1'b0;
end 
// YIN[ 4 ]
initial
begin
	YIN[4] = 1'b0;
end 
// YIN[ 3 ]
initial
begin
	YIN[3] = 1'b1;
	YIN[3] = #20000 1'b0;
end 
// YIN[ 2 ]
initial
begin
	YIN[2] = 1'b0;
end 
// YIN[ 1 ]
initial
begin
	YIN[1] = 1'b1;
	YIN[1] = #20000 1'b0;
end 
// YIN[ 0 ]
initial
begin
	YIN[0] = 1'b1;
	YIN[0] = #20000 1'b0;
end 

// Sub
initial
begin
	Sub = 1'b0;
	Sub = #60000 1'b1;
	Sub = #20000 1'b0;
end 

// SF
initial
begin
	SF = 1'b1;
	SF = #20000 1'b0;
	SF = #20000 1'b1;
	SF = #20000 1'b0;
	SF = #20000 1'b1;
	SF = #20000 1'b0;
end 

Datapath_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.ENA(ENA),
	.ENB(ENB),
	.LSA(LSA),
	.LSB(LSB),
	.reset(reset),
	.SelA(SelA),
	.SelB(SelB),
	.SF(SF),
	.Sub(Sub),
	.XIN(XIN),
	.YIN(YIN),
	.sampler_tx(sampler)
);

Datapath_vlg_check_tst tb_out(
	.Sum(Sum),
	.X(X),
	.Y(Y),
	.Z(Z),
	.sampler_rx(sampler)
);
endmodule

